"use strict";(self.webpackChunkspring_html_generator_doc=self.webpackChunkspring_html_generator_doc||[]).push([[109],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(r),m=i,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(g,l(l({ref:t},u),{},{components:r})):n.createElement(g,l({ref:t},u))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3602:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:2},l="Styling",o={unversionedId:"starter/styling-html",id:"starter/styling-html",title:"Styling",description:"We can style any of the elements and tags in HTML using the builder pattern.",source:"@site/docs/starter/styling-html.md",sourceDirName:"starter",slug:"/starter/styling-html",permalink:"/spring-html-generator-doc/docs/starter/styling-html",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/starter/styling-html.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"DocumentationSidebar",previous:{title:"Builiding Tags",permalink:"/spring-html-generator-doc/docs/starter/building-tags"},next:{title:"Templates",permalink:"/spring-html-generator-doc/docs/category/templates"}},s={},c=[{value:"Styling",id:"styling-1",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"styling"},"Styling"),(0,i.kt)("p",null,"We can style any of the elements and tags in HTML using the builder pattern.\nIn this following java example, an image element is styled using a builder pattern:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ImageBuilder: The code begins by creating an ImageBuilder, designed for constructing HTML Img elements. It defines various attributes and styles for the image.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Image Attributes: Within the builder, attributes like src, alt, width, and height are set to specify the image source, alternative text, dimensions, and styling.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Styling with CSS: The style method allows for the addition of inline CSS styles to the image. In this case, the display: block; style is applied.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Building the Image: The image is assembled by chaining the various attributes and styles within the image builder.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"HTML Generation: Using the HtmlBuilder, the image element is embedded into an HTML body structure, which prepares it for use in a complete HTML document."))),(0,i.kt)("p",null,"This code snippet showcases how to create and style an HTML image element programmatically, offering flexibility in customizing the appearance of images within web content."),(0,i.kt)("h3",{id:"styling-1"},"Styling"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},' ImageBuilder imageBuilder = ImageBuilder.builder()\n                .src("https://via.placeholder.com/600x200", "placeholder")\n                .attribute("alt", "placeholder")\n                .attribute("width", "200")\n                .attribute("height", "auto")\n                .style("style", "display: block;")\n                .build();\nString imageContent = HtmlBuilder.builder().body(BodyBuilder.builder().image(imageBuilder).build()).build();\n')))}d.isMDXComponent=!0}}]);