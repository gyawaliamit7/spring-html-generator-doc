"use strict";(self.webpackChunkspring_html_generator_doc=self.webpackChunkspring_html_generator_doc||[]).push([[410],{3905:(e,a,i)=>{i.d(a,{Zo:()=>o,kt:()=>h});var t=i(7294);function r(e,a,i){return a in e?Object.defineProperty(e,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[a]=i,e}function n(e,a){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var a=1;a<arguments.length;a++){var i=null!=arguments[a]?arguments[a]:{};a%2?n(Object(i),!0).forEach((function(a){r(e,a,i[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):n(Object(i)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(i,a))}))}return e}function d(e,a){if(null==e)return{};var i,t,r=function(e,a){if(null==e)return{};var i,t,r={},n=Object.keys(e);for(t=0;t<n.length;t++)i=n[t],a.indexOf(i)>=0||(r[i]=e[i]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)i=n[t],a.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var u=t.createContext({}),s=function(e){var a=t.useContext(u),i=a;return e&&(i="function"==typeof e?e(a):l(l({},a),e)),i},o=function(e){var a=s(e.components);return t.createElement(u.Provider,{value:a},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var i=e.components,r=e.mdxType,n=e.originalType,u=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),g=s(i),c=r,h=g["".concat(u,".").concat(c)]||g[c]||p[c]||n;return i?t.createElement(h,l(l({ref:a},o),{},{components:i})):t.createElement(h,l({ref:a},o))}));function h(e,a){var i=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=i.length,l=new Array(n);l[0]=c;var d={};for(var u in a)hasOwnProperty.call(a,u)&&(d[u]=a[u]);d.originalType=e,d[g]="string"==typeof e?e:r,l[1]=d;for(var s=2;s<n;s++)l[s]=i[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}c.displayName="MDXCreateElement"},4117:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>n,metadata:()=>d,toc:()=>s});var t=i(7462),r=(i(7294),i(3905));const n={sidebar_position:1},l="Builiding Tags",d={unversionedId:"starter/building-tags",id:"starter/building-tags",title:"Builiding Tags",description:"Building  Paragraphs",source:"@site/docs/starter/building-tags.md",sourceDirName:"starter",slug:"/starter/building-tags",permalink:"/spring-html-generator-doc/docs/starter/building-tags",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/starter/building-tags.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"DocumentationSidebar",previous:{title:"Examples",permalink:"/spring-html-generator-doc/docs/category/examples"},next:{title:"Styling",permalink:"/spring-html-generator-doc/docs/starter/styling-html"}},u={},s=[{value:"Building  Paragraphs",id:"building--paragraphs",level:3},{value:"Building  Links",id:"building--links",level:3},{value:"Building Images",id:"building-images",level:3},{value:"Building Headings",id:"building-headings",level:3},{value:"Building Tables",id:"building-tables",level:3},{value:"HTML Table Structure with Builder Pattern",id:"html-table-structure-with-builder-pattern",level:4},{value:"Building DIV",id:"building-div",level:3}],o={toc:s},g="wrapper";function p(e){let{components:a,...i}=e;return(0,r.kt)(g,(0,t.Z)({},o,i,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"builiding-tags"},"Builiding Tags"),(0,r.kt)("h3",{id:"building--paragraphs"},"Building  Paragraphs"),(0,r.kt)("p",null,'The ParagraphBuilder allows you to effortlessly create paragraphs of text. In the provided Java code, a simple paragraph is constructed with the text, "This is just a simple Paragraph." The resulting paragraph content can be easily embedded into HTML using the HtmlBuilder, making it a useful tool for structuring textual content in your web applications.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ParagraphBuilder paragraphBuilder = ParagraphBuilder.builder().paragraph("This is just simple Paragraph").build();\nString paragraphContent = HtmlBuilder.builder().body(BodyBuilder.builder().paragraph(paragraphBuilder).build()).build();\n')),(0,r.kt)("h3",{id:"building--links"},"Building  Links"),(0,r.kt)("p",null,'With the AhrefBuilder, you can efficiently generate HTML links. In the given code snippet, an anchor (a) element is constructed with the href attribute set to "#", and the link text is defined as "url details." This enables you to create hyperlinks in your HTML content with ease, providing valuable navigation for your users.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'AhrefBuilder ahrefBuilder = AhrefBuilder.builder().ahref("#", "url details").build();\nString ahrefContent = HtmlBuilder.builder().body(BodyBuilder.builder().ahref(ahrefBuilder).build()).build();\n')),(0,r.kt)("h3",{id:"building-images"},"Building Images"),(0,r.kt)("p",null,"The ImageBuilder simplifies the process of incorporating images into your HTML documents. Here, an image element is created with the src attribute pointing to a specific image URL, and additional image details are provided. This allows you to seamlessly integrate images into your web content, enhancing its visual appeal and engagement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ImageBuilder imageBuilder = ImageBuilder.builder().src("https://images.unsplash.com/photo-1682685797332-e678a04f8a64?ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxlZGl0b3JpYWwtZmVlZHw2fHx8ZW58MHx8fHx8&auto=format&fit=crop&w=500&q=60", "image details").build();\nString imageContent = HtmlBuilder.builder().body(BodyBuilder.builder().image(imageBuilder).build()).build();\n')),(0,r.kt)("h3",{id:"building-headings"},"Building Headings"),(0,r.kt)("p",null,'The HeadingBuilder is designed for generating headings in HTML documents. In this code snippet, a heading with the content "heading content" is generated as a level 1 heading (H1). You can easily customize the heading level and text, making it a convenient tool for structuring and organizing your web page\'s content. Headings are crucial for improving document structure and accessibility.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'HeadingBuilder headingBuilder = HeadingBuilder.builder().heading("heading content", Heading.HEADING_1).build();\nString headingContent = HtmlBuilder.builder().body(BodyBuilder.builder().heading(headingBuilder).build()).build();\n')),(0,r.kt)("h3",{id:"building-tables"},"Building Tables"),(0,r.kt)("p",null,"The provided Java code creates a table structure using a builder pattern:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"TableBuilder: The top-level builder initializes the creation of an HTML table.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"TableRowBuilder: Within the table, a table row is built using this builder.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"TableDataBuilder: Each table row contains table data cells. Here, a table data cell is constructed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'HeadingBuilder: Inside one of the table data cells, a heading element is created. The heading has the text "test heading" and is styled with a specific color (#333). This code snippet demonstrates how to structure a table with a heading.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},'ParagraphBuilder: In another table data cell, a paragraph is generated with the text "Test Paragraph". This shows how to add paragraphs within table cells.'))),(0,r.kt)("p",null,"This code segment is a useful example of how to create structured HTML tables using a builder pattern, making it easier to construct complex HTML elements programmatically."),(0,r.kt)("h4",{id:"html-table-structure-with-builder-pattern"},"HTML Table Structure with Builder Pattern"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'TableBuilder tableBuilder = TableBuilder.builder()\n        .tableRow(TableRowBuilder.builder()\n                .tableData(TableDataBuilder.builder()\n                        .table(TableBuilder.builder()\n                                .tableRow(TableRowBuilder.builder()\n                                        .tableData(\n                                                TableDataBuilder.builder()\n                                                        .heading(HeadingBuilder.builder()\n                                                                .style("style", "color: #333;")\n                                                                .heading("test heading", Heading.HEADING_1)\n                                                                .build()).build())\n                                        .build())\n                                .tableRow(TableRowBuilder.builder()\n                                        .tableData(\n                                                TableDataBuilder.builder()\n                                                        .paragraph(ParagraphBuilder.builder().paragraph("Test Paragraph").build())\n                                                        .build())\n                                        .build())\n                                .build())\n                        .build())\n                .build())\n        .build();\n')),(0,r.kt)("h3",{id:"building-div"},"Building DIV"),(0,r.kt)("p",null,"This Java code snippet showcases the creation of an HTML div element encapsulating a paragraph of text using a builder pattern:"),(0,r.kt)("p",null,"DivBuilder: The code initiates a DivBuilder, which is a builder for constructing HTML div elements. This builder enables the creation and customization of the div."),(0,r.kt)("p",null,'ParagraphBuilder: Inside the div, a paragraph is constructed using a ParagraphBuilder. This paragraph is defined with the content "test paragraph inside div."'),(0,r.kt)("p",null,"Building the Div: The div is assembled by chaining the paragraph builder within the div builder. This process integrates the paragraph into the div element."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'DivBuilder divBuilder = DivBuilder.builder()\n                .paragraph(ParagraphBuilder.builder().paragraph("test paragraph inside div").build())\n                .build();\n        String divContent = HtmlBuilder.builder().body(BodyBuilder.builder().div(divBuilder).build()).build();\n')))}p.isMDXComponent=!0}}]);